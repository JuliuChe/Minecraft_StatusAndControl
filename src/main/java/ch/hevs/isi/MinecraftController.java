package ch.hevs.isi;

import ch.hevs.isi.db.DatabaseConnector;

import static ch.hevs.isi.SmartControl.startWorld;

public class MinecraftController {

    /**
     * Attribute that we either activate or not to erase the database, if false, we do not erase the old values
     * if true, erase the old values
     */
    public static boolean ERASE_PREVIOUS_DATA_INB_DB        = false;


    public static void usage() {
        System.out.println();
        System.out.println("You're reading this message because no parameter (or not the needed ones) has been passed to the application.");
        System.out.println();
        System.out.println("In development mode, just add to your running configuration the needed parameters (see usage below).");
        System.out.println("In running mode, the application's usage is the following:");
        System.out.println("java MinecraftController <InfluxDB Server> <DB Name> <DB Measurement> <DB Username> <ModbusTCP Server> <ModbusTCP port> [-modbus4j] [-keepAlive]");
        System.out.println("where:");
        System.out.println("- <InfluxDB Server>:  The complete URL of the InfluxDB server, including the protocol (http or https)...");
        System.out.println("                      Example: https://influx.sdi.hevs.ch");
        System.out.println("- <DB Name>:          The name of the Influx DB to use. For this project, this name is the name of the group you've been affected to. (SInXX)");
        System.out.println("- <DB Username>:      The user's name to use to access the DB. It's also your group's name. (SInXX)");
        System.out.println("- <Token>:            The token to access the DB, it has to be generated by your database provider");
        System.out.println("- <ModbusTCP Server>: The IP address of the Minecraft ModbusTCP server (default value: localhost)");
        System.out.println("- <ModbusTCP port>:   The port number of the Minecraft ModbusTCP server (default value: 1502)");
        System.out.println("- [-eraseDB]:         Optional parameter! If set, the application will erase the previous data in InfluxDB...");
        System.out.println("- <measurement>:      Optional parameter! If set, the application will send the data to the specified set of measurement");
        System.out.println("                      if it is not set, the application will send the data to the default measurement (i.e. \"Minecraft\")");
        System.out.println();
        System.exit(1);
    }

    /**
     * This where everything starts...
     * This method is the entry point of the application. It stores and interperet the parameters that have
     * been passed to the application by the user.
     *
     * @param args
     */
    @SuppressWarnings("all")
    public static void main(String[] args) {

        // ------------------------------------- DO NOT CHANGE THE FOLLOWING LINES -------------------------------------
        String dbProtocol       = "http";
        String dbHostName       = "localhost";
        String dbOrg           = "labo";
        String dbBucket       = "root";
        String dbToken       = "root";
        String dbMeasurement  = "Minecraft";

        String modbusTcpHost    = "localhost";
        int modbusTcpPort       = 1502;

        // Check the number of arguments  show usage message if the number does not match.
        String[] parameters = null;

        // If there is only one number given as parameter, construct the parameters according the group number.
        if (args.length >= 5) {
            parameters = args;

            // Decode parameters for influxDB
            String[] dbParams = parameters[0].split("://");
            if (dbParams.length != 2) {
                usage();
            }

            dbProtocol    = dbParams[0];
            dbHostName    = dbParams[1];
            dbOrg         = parameters[1];
            dbBucket      = parameters[2];
            dbToken       = parameters[3];

            // Decode parameters for Modbus TCP
            modbusTcpHost = parameters[4];
            modbusTcpPort = Integer.parseInt(parameters[5]);

            for (int i = 5; i < args.length; i++) {
                if (parameters[i].compareToIgnoreCase("-erasedb") == 0) {
                    ERASE_PREVIOUS_DATA_INB_DB = true;
                }

            }
            if (ERASE_PREVIOUS_DATA_INB_DB && args.length >6) {
                dbMeasurement= parameters[7];}
            else if (!ERASE_PREVIOUS_DATA_INB_DB && args.length ==7) {
               dbMeasurement=parameters[6];
            }
        } else {
            usage();
        }


        //Uncomment below to erase the previous data in the database
        if(ERASE_PREVIOUS_DATA_INB_DB) {
            DatabaseConnector.getInstance().initialize(dbProtocol, dbHostName, dbOrg, dbBucket, dbToken, dbMeasurement);
            DatabaseConnector.getInstance().eraseDatabase();
        }



        startWorld(dbProtocol, dbHostName, dbOrg, dbBucket, dbToken, modbusTcpHost, modbusTcpPort,dbMeasurement);

        // ------------------------------------ /DO NOT CHANGE THE FOLLOWING LINES -------------------------------------

        /* Below is the test code for the database component of the program
         */
        //DatabaseConnector.getInstance().initialize(dbProtocol, dbHostName, dbOrg, dbBucket, dbToken);

        /*
        FloatDataPoint tm = new FloatDataPoint("CLOCK_FLOAT", true);
        tm.setValue(0f);

        FloatDataPoint fdata=new FloatDataPoint("TestPoint", false);
        fdata.setValue(0.123f);
        tm.setValue(0.1f);
        fdata.setValue(0.128f);
        tm.setValue(0.2f);
        fdata.setValue(0.120f);
        tm.setValue(0.3f);
        fdata.setValue(0.130f);

        FieldConnector.getInstance().initialize(modbusTcpHost, modbusTcpPort);
        FieldConnector.getInstance().startPolling(3000);
        WebConnector.getInstance();
        */


    }
}
